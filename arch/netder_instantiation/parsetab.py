
# parsetab.py
# This file is automatically generated. Do not edit.
_tabversion = '3.2'

_lr_method = 'LALR'

_lr_signature = b'\x18\t\x8f\xef\xa2\xc5?i\xe3\xcb\xe3\xe0F0\xb8\xdd'
    
_lr_action_items = {'LBRACKET':([0,3,4,7,14,15,16,17,20,21,22,43,45,76,],[3,3,3,23,3,3,3,3,43,-9,45,3,3,-8,]),'NOT':([0,3,4,14,15,16,17,43,45,],[4,4,4,4,4,4,4,4,4,]),'FORALL':([0,3,4,14,15,16,17,43,45,],[5,5,5,5,5,5,5,5,5,]),'THEREEXISTS':([0,3,4,14,15,16,17,43,45,],[6,6,6,6,6,6,6,6,6,]),'IDENTIFIER':([0,3,4,5,6,14,15,16,17,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,43,44,45,79,],[7,7,7,21,21,7,7,7,7,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,7,76,7,46,]),'CONSTANT':([0,3,4,14,15,16,17,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,43,45,79,],[10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,]),'STRINGLIT':([0,3,4,14,15,16,17,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,43,45,79,],[11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,]),'TRUE':([0,3,4,14,15,16,17,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,43,45,79,],[12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,]),'FALSE':([0,3,4,14,15,16,17,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,43,45,79,],[13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,]),'$end':([1,2,10,11,12,13,19,38,39,40,41,42,46,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,78,80,81,],[0,-1,-41,-43,-44,-45,-7,-3,-4,-5,-6,-2,-42,-13,-14,-19,-20,-23,-24,-27,-28,-31,-32,-35,-36,-17,-16,-15,-22,-21,-26,-25,-30,-29,-34,-33,-38,-37,-18,-12,-10,-11,]),'IFF':([1,2,10,11,12,13,18,19,38,39,40,41,42,46,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,77,78,80,81,],[14,-1,-41,-43,-44,-45,14,-7,-3,-4,-5,-6,-2,-42,-13,-14,-19,-20,-23,-24,-27,-28,-31,-32,-35,-36,-17,-16,-15,-22,-21,-26,-25,-30,-29,-34,-33,-38,-37,-18,14,14,-12,-10,-11,]),'IMPLIES':([1,2,10,11,12,13,18,19,38,39,40,41,42,46,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,77,78,80,81,],[15,-1,-41,-43,-44,-45,15,-7,15,-4,-5,-6,-2,-42,-13,-14,-19,-20,-23,-24,-27,-28,-31,-32,-35,-36,-17,-16,-15,-22,-21,-26,-25,-30,-29,-34,-33,-38,-37,-18,15,15,-12,-10,-11,]),'OR':([1,2,10,11,12,13,18,19,38,39,40,41,42,46,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,77,78,80,81,],[16,-1,-41,-43,-44,-45,16,-7,16,16,-5,-6,-2,-42,-13,-14,-19,-20,-23,-24,-27,-28,-31,-32,-35,-36,-17,-16,-15,-22,-21,-26,-25,-30,-29,-34,-33,-38,-37,-18,16,16,-12,-10,-11,]),'AND':([1,2,10,11,12,13,18,19,38,39,40,41,42,46,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,77,78,80,81,],[17,-1,-41,-43,-44,-45,17,-7,17,17,17,-6,-2,-42,-13,-14,-19,-20,-23,-24,-27,-28,-31,-32,-35,-36,-17,-16,-15,-22,-21,-26,-25,-30,-29,-34,-33,-38,-37,-18,17,17,-12,-10,-11,]),'RBRACKET':([2,10,11,12,13,18,19,38,39,40,41,42,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,77,78,80,81,82,],[-1,-41,-43,-44,-45,42,-7,-3,-4,-5,-6,-2,-42,78,-40,-13,-14,-19,-20,-23,-24,-27,-28,-31,-32,-35,-36,-17,-16,-15,-22,-21,-26,-25,-30,-29,-34,-33,-38,-37,-18,80,81,-12,-10,-11,-39,]),'EQ':([7,8,9,10,11,12,13,46,61,74,],[-42,24,31,-41,-43,-44,-45,-42,-17,-18,]),'LT':([7,8,9,10,11,12,13,46,61,74,],[-42,25,32,-41,-43,-44,-45,-42,-17,-18,]),'LTE':([7,8,9,10,11,12,13,46,61,74,],[-42,26,33,-41,-43,-44,-45,-42,-17,-18,]),'GT':([7,8,9,10,11,12,13,46,61,74,],[-42,27,34,-41,-43,-44,-45,-42,-17,-18,]),'GTE':([7,8,9,10,11,12,13,46,61,74,],[-42,28,35,-41,-43,-44,-45,-42,-17,-18,]),'NEQ':([7,8,9,10,11,12,13,46,61,74,],[-42,29,36,-41,-43,-44,-45,-42,-17,-18,]),'PLUS':([7,8,9,10,11,12,13,46,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,],[-42,30,37,-41,-43,-44,-45,-42,30,37,30,37,30,37,30,37,30,37,30,37,-17,37,30,37,30,37,30,37,30,37,30,37,30,-18,]),'COMMA':([10,11,12,13,20,21,22,46,47,48,76,82,],[-41,-43,-44,-45,44,-9,44,-42,79,-40,-8,-39,]),}

_lr_action = { }
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = { }
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'formula':([0,3,4,14,15,16,17,43,45,],[1,18,19,38,39,40,41,75,77,]),'atomicFormula':([0,3,4,14,15,16,17,43,45,],[2,2,2,2,2,2,2,2,2,]),'expression':([0,3,4,14,15,16,17,24,25,26,27,28,29,31,32,33,34,35,36,43,45,],[8,8,8,8,8,8,8,49,51,53,55,57,59,63,65,67,69,71,73,8,8,]),'term':([0,3,4,14,15,16,17,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,43,45,79,],[9,9,9,9,9,9,9,48,50,52,54,56,58,60,61,62,64,66,68,70,72,74,9,9,82,]),'quantifierList':([5,6,],[20,22,]),'termList':([23,],[47,]),}

_lr_goto = { }
for _k, _v in _lr_goto_items.items():
   for _x,_y in zip(_v[0],_v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = { }
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> formula","S'",1,None,None,None),
  ('formula -> atomicFormula','formula',1,'p_formula_atomic_formula','..\\ATLAST\\parsing\\parser.py',25),
  ('formula -> LBRACKET formula RBRACKET','formula',3,'p_formula_bracketed','..\\ATLAST\\parsing\\parser.py',29),
  ('formula -> formula IFF formula','formula',3,'p_formula_iff','..\\ATLAST\\parsing\\parser.py',34),
  ('formula -> formula IMPLIES formula','formula',3,'p_formula_implies','..\\ATLAST\\parsing\\parser.py',44),
  ('formula -> formula OR formula','formula',3,'p_formula_or','..\\ATLAST\\parsing\\parser.py',54),
  ('formula -> formula AND formula','formula',3,'p_formula_and','..\\ATLAST\\parsing\\parser.py',63),
  ('formula -> NOT formula','formula',2,'p_formula_not','..\\ATLAST\\parsing\\parser.py',70),
  ('quantifierList -> quantifierList COMMA IDENTIFIER','quantifierList',3,'p_quantifier_list','..\\ATLAST\\parsing\\parser.py',79),
  ('quantifierList -> IDENTIFIER','quantifierList',1,'p_quantifier_single','..\\ATLAST\\parsing\\parser.py',83),
  ('formula -> FORALL quantifierList LBRACKET formula RBRACKET','formula',5,'p_formula_forall','..\\ATLAST\\parsing\\parser.py',87),
  ('formula -> THEREEXISTS quantifierList LBRACKET formula RBRACKET','formula',5,'p_formula_thereexists','..\\ATLAST\\parsing\\parser.py',93),
  ('atomicFormula -> IDENTIFIER LBRACKET termList RBRACKET','atomicFormula',4,'p_atomic_formula_predicate','..\\ATLAST\\parsing\\parser.py',105),
  ('atomicFormula -> expression EQ expression','atomicFormula',3,'p_atomic_formula_eq','..\\ATLAST\\parsing\\parser.py',111),
  ('atomicFormula -> expression EQ term','atomicFormula',3,'p_atomic_formula_eq','..\\ATLAST\\parsing\\parser.py',112),
  ('atomicFormula -> term EQ expression','atomicFormula',3,'p_atomic_formula_eq','..\\ATLAST\\parsing\\parser.py',113),
  ('atomicFormula -> term EQ term','atomicFormula',3,'p_atomic_formula_eq','..\\ATLAST\\parsing\\parser.py',114),
  ('expression -> expression PLUS term','expression',3,'p_expression_plus','..\\ATLAST\\parsing\\parser.py',121),
  ('expression -> term PLUS term','expression',3,'p_atomic_expression_plus','..\\ATLAST\\parsing\\parser.py',128),
  ('atomicFormula -> expression LT expression','atomicFormula',3,'p_atomic_formula_lt','..\\ATLAST\\parsing\\parser.py',135),
  ('atomicFormula -> expression LT term','atomicFormula',3,'p_atomic_formula_lt','..\\ATLAST\\parsing\\parser.py',136),
  ('atomicFormula -> term LT expression','atomicFormula',3,'p_atomic_formula_lt','..\\ATLAST\\parsing\\parser.py',137),
  ('atomicFormula -> term LT term','atomicFormula',3,'p_atomic_formula_lt','..\\ATLAST\\parsing\\parser.py',138),
  ('atomicFormula -> expression LTE expression','atomicFormula',3,'p_atomic_formula_lte','..\\ATLAST\\parsing\\parser.py',145),
  ('atomicFormula -> expression LTE term','atomicFormula',3,'p_atomic_formula_lte','..\\ATLAST\\parsing\\parser.py',146),
  ('atomicFormula -> term LTE expression','atomicFormula',3,'p_atomic_formula_lte','..\\ATLAST\\parsing\\parser.py',147),
  ('atomicFormula -> term LTE term','atomicFormula',3,'p_atomic_formula_lte','..\\ATLAST\\parsing\\parser.py',148),
  ('atomicFormula -> expression GT expression','atomicFormula',3,'p_atomic_formula_gt','..\\ATLAST\\parsing\\parser.py',155),
  ('atomicFormula -> expression GT term','atomicFormula',3,'p_atomic_formula_gt','..\\ATLAST\\parsing\\parser.py',156),
  ('atomicFormula -> term GT expression','atomicFormula',3,'p_atomic_formula_gt','..\\ATLAST\\parsing\\parser.py',157),
  ('atomicFormula -> term GT term','atomicFormula',3,'p_atomic_formula_gt','..\\ATLAST\\parsing\\parser.py',158),
  ('atomicFormula -> expression GTE expression','atomicFormula',3,'p_atomic_formula_gte','..\\ATLAST\\parsing\\parser.py',166),
  ('atomicFormula -> expression GTE term','atomicFormula',3,'p_atomic_formula_gte','..\\ATLAST\\parsing\\parser.py',167),
  ('atomicFormula -> term GTE expression','atomicFormula',3,'p_atomic_formula_gte','..\\ATLAST\\parsing\\parser.py',168),
  ('atomicFormula -> term GTE term','atomicFormula',3,'p_atomic_formula_gte','..\\ATLAST\\parsing\\parser.py',169),
  ('atomicFormula -> expression NEQ expression','atomicFormula',3,'p_atomic_formula_neq','..\\ATLAST\\parsing\\parser.py',176),
  ('atomicFormula -> expression NEQ term','atomicFormula',3,'p_atomic_formula_neq','..\\ATLAST\\parsing\\parser.py',177),
  ('atomicFormula -> term NEQ expression','atomicFormula',3,'p_atomic_formula_neq','..\\ATLAST\\parsing\\parser.py',178),
  ('atomicFormula -> term NEQ term','atomicFormula',3,'p_atomic_formula_neq','..\\ATLAST\\parsing\\parser.py',179),
  ('termList -> termList COMMA term','termList',3,'p_term_list','..\\ATLAST\\parsing\\parser.py',191),
  ('termList -> term','termList',1,'p_term_list_single','..\\ATLAST\\parsing\\parser.py',195),
  ('term -> CONSTANT','term',1,'p_term_constant','..\\ATLAST\\parsing\\parser.py',201),
  ('term -> IDENTIFIER','term',1,'p_term_variable','..\\ATLAST\\parsing\\parser.py',207),
  ('term -> STRINGLIT','term',1,'p_term_stringlit','..\\ATLAST\\parsing\\parser.py',213),
  ('term -> TRUE','term',1,'p_term_true','..\\ATLAST\\parsing\\parser.py',219),
  ('term -> FALSE','term',1,'p_term_false','..\\ATLAST\\parsing\\parser.py',225),
]
